# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ThematicMapTools
                                 A QGIS plugin
 Tools for designing thematics maps
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-01-23
        git sha              : $Format:%H$
        copyright            : (C) 2021 by CAMELLonCASE
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


import os.path
import time
from qgis.core import Qgis, QgsVectorLayer, QgsRasterLayer, QgsMessageLog, QgsVectorLayerJoinInfo, QgsProject, QgsWkbTypes
from qgis.PyQt.Qt import QObject, QVariant, Qt
from qgis.PyQt.QtWidgets import QProgressBar, QMessageBox
from qgis.PyQt.QtCore import *
from qgis.utils import iface
from qgis.gui import QgsMessageBar


class ChangeLabelPosition(QObject):
    """Docstring"""

    def __init__(self, parent=None):
        super(ChangeLabelPosition, self).__init__()
        self.parent = parent
        self.layers = QgsProject.instance().mapLayers()
        self.selected_feature = list()
        # self.getLayers()
        # self.createPairDict()
        #self.removeJoinTables()

    def getSelectedFeature(self):
        print(self.layers)

        for layerIds, layer in self.layers.items():

            if len(layer.selectedFeatures()) > 1:
                QMessageBox.critical(
                    iface.mainWindow(), "Error", "more than one feature were selected")
            else:
                self.selected_feature.append(layer.selectedFeatures())
                print(self.selected_feature)


    def setQuadrantPos(self):
        self.getSelectedFeature()


        # if self.number_sel_feat > 0:
        #     self.layer.startEditing()
        #     for feature in self.selected:
        #         pos = feature['offset_quad']
        #         pos = 0 if not pos else int(pos)
        #         if pos < 8:
        #             pos += 1
        #             self.layer.changeAttributeValue(feature.id(), 4, pos)
        #             self.layer.triggerRepaint()
        #         elif pos == 8:
        #             pos = 0
        #             self.layer.changeAttributeValue(feature.id(), 4, pos)
        #             self.layer.triggerRepaint()
        #         else:
        #             pos = 0
        #             self.layer.changeAttributeValue(feature.id(), 4, pos)
        #             self.layer.triggerRepaint()
        #     self.layer.commitChanges()
        # else:
        #     QMessageBox.critical(self.iface.mainWindow(), "Error",
        #                          "Please select at least one feature from rel_ponto_cotado_altimetrico_p layer!")

    def validate_field(self, layer):

        for field in layer.fields():
            if field.name() == self.field_name:
                return layer

            else:
                QMessageBox.critical(
                    self.iface.mainWindow(), "Error", "field does not exists")
                return layer

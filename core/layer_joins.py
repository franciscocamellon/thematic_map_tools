# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ThematicMapTools
                                 A QGIS plugin
 Tools for designing thematics maps
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-01-23
        git sha              : $Format:%H$
        copyright            : (C) 2021 by CAMELLonCASE
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


import os.path
import time
from qgis.core import Qgis, QgsVectorLayer, QgsRasterLayer, QgsMessageLog, QgsVectorLayerJoinInfo, QgsProject, QgsWkbTypes
from qgis.PyQt.Qt import QObject, QVariant, Qt
from qgis.PyQt.QtWidgets import QProgressBar
from qgis.PyQt.QtCore import *
from qgis.utils import iface
from qgis.gui import QgsMessageBar


class VectorLayerJoins(QObject):
    """Docstring"""

    def __init__(self, parent=None):
        super(VectorLayerJoins, self).__init__()
        self.parent = parent
        self.layers = QgsProject.instance().mapLayers()
        self.spatial, self.nonSpatial, self.toRemove = [], [], []
        self.getLayers()
        # self.createPairDict()
        #self.removeJoinTables()

    def getLayers(self):
        """Get the spatial and non spatial layers"""
        for layer, v in self.layers.items():
            if isinstance(v, QgsRasterLayer):
                pass
            elif isinstance(v, QgsVectorLayer):
                if QgsWkbTypes.displayString(v.wkbType()) == 'NoGeometry':
                    self.nonSpatial.append(v)
                else:
                    self.spatial.append(v)

    def createPairDict(self):
        """Docstring"""
        self.pairDict = dict()
        for item in self.spatial:
            for nitem in self.nonSpatial:
                if item.name() == nitem.name():
                    self.pairDict[item] = nitem
                    self.nonSpatial.remove(nitem)
        return self.pairDict

    def removeNonSpatial(self):
        """Docstring"""
        for camada in self.toRemove:
            QgsProject.instance().removeMapLayer(camada.id())

    def vectorLayerJoin(self):
        pairs = self.createPairDict()
        for layer, table in pairs.items():
            target = layer
            layerToJoin = table
            join = QgsVectorLayerJoinInfo()
            join.setJoinFieldName('id_feature')
            join.setTargetFieldName('id')
            join.setJoinLayerId(layerToJoin.id())
            join.setUsingMemoryCache(True)
            join.setEditable(True)
            join.setDynamicFormEnabled(True)
            join.setUpsertOnEdit(True)
            join.setPrefix('')
            join.setJoinFieldNamesSubset(['legenda', 'ocultar', 'tamanhotxt',
                                          'style', 'casetxt', 'flspacing',
                                          'fwspacing', 'justtxt', 'orient_txt',
                                          'orient_simb', 'offset_quad',
                                          'offset_txt','offset_txt_x',
                                          'offset_txt_y', 'offset_simb',
                                          'offset_simb_x', 'offset_simb_y',
                                          'priority'])
            join.setJoinLayer(layerToJoin)
            target.addJoin(join)
            layerToJoin.startEditing()
            target.triggerRepaint()
            self.message('Success', 'All joins were maded!', 0, 5)

    def removeJoinTables(self):
        """Docstring"""
        pairs = self.createPairDict()
        for layer, table in pairs.items():
            target = layer
            layerToJoin = table
            target.removeJoin(layerToJoin.id())
            target.triggerRepaint()
        self.message('Success', 'All joins were removed!', 3, 5)

    def message(self, title, text, level, duration):
        """Docstring"""
        # fix the progreemesssagebar
        # progressMessageBar = iface.messageBar().createMessage("Removing vector layer joins...")
        # progress = QProgressBar()
        # progress.setMaximum(10)
        # progress.setAlignment(Qt.AlignLeft|Qt.AlignVCenter)
        # progressMessageBar.layout().addWidget(progress)
        # iface.messageBar().pushWidget(progressMessageBar, Qgis.Info)

        # for i in range(10):
        #     time.sleep(1)
        #     progress.setValue(i + 5)

        # iface.messageBar().clearWidgets()

        iface.messageBar().pushMessage(self.tr(title),
                                       self.tr(text),
                                       level=level,
                                       duration=duration)
